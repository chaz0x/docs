{
  "openapi": "3.0.1",
  "info": {
    "title": "Vanish Core API",
    "description": "API endpoints for the Vanish Core service.",
    "license": {
      "name": "MIT"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.vanish.trade/core"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/balance/query": {
      "post": {
        "description": "Retrieves the user's token balances.",
        "requestBody": {
          "description": "Request payload for querying balances.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response containing balance details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access due to missing or invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
    },
    "/deposit": {
      "post": {
        "description": "Processes a deposit transaction for the user.",
        "requestBody": {
          "description": "TBD",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful deposit response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access due to missing or invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/deposit/{tx_id}": {
      "get": {
        "description": "Retrieves the status of a deposit transaction using the provided transaction ID.",
        "parameters": [
          {
            "name": "tx_id",
            "in": "path",
            "description": "Transaction id for the deposit transaction.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit transaction status response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access due to missing or invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/withdraw": {
      "post": {
        "description": "Processes a user's withdrawal request.",
        "requestBody": {
          "description": "Details of the withdrawal, including the token address and the amount to be withdrawn.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful withdrawal response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/withdraw/{tx_id}": {
      "get": {
        "description": "Retrieves the status of a withdrawal transaction based on the provided transaction ID.",
        "parameters": [
          {
            "name": "tx_id",
            "in": "path",
            "description": "The transaction ID of the withdrawal request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful withdrawal status response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trade/buy": {
      "post": {
        "description": "Executes a buy trade request for the user.",
        "requestBody": {
          "description": "Details of the buy trade request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful buy trade response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trade/sell": {
      "post": {
        "description": "Executes a sell trade request for the user.",
        "requestBody": {
          "description": "Details of the sell trade request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful sell trade response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trade/pnl": {
      "post": {
        "description": "Retrieves profit and loss (PNL) data for a user.",
        "requestBody": {
          "description": "Payload containing the details of the PNL request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradePNLRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response containing user's PNL data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradePNLResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trade/{tx_id}": {
      "get": {
        "description": "Retrieves the status of a trade transaction (buy or sell) based on the provided transaction ID.",
        "parameters": [
          {
            "name": "tx_id",
            "in": "path",
            "description": "The transaction ID of the trade request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful trade status response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/team/info": {
      "get": {
        "description": "Retrieves the details of the team",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Team info response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/central_wallet": {
      "get": {
        "description": "Retrieves the address of the central wallet.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful central wallet response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CentralWalletResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/team/withdraw_fee": {
      "post": {
        "description": "Processes a team fee withdrawal request.",
        "responses": {
          "200": {
            "description": "Successful withdrawal response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BalanceRequest": {
        "required": [
          "action",
          "user_address",
          "signature"
        ],
        "type": "object",
        "properties": {
          "action": {
            "description": "Prefix used for signature generation.",
            "type": "string"
          },
          "user_address": {
            "description": "Wallet address of the user.",
            "type": "string"
          },
          "signature": {
            "description": "Signature created by signing {action}{user_address} with the user's wallet.",
            "type": "string"
          }
        }
      },
      "BalanceResponse": {
        "required": [
          "balances"
        ],
        "type": "object",
        "properties": {
          "balances": {
            "description": "Mapping of token addresses to their respective balance details, including available and frozen balances.",
            "type": "object"
          }
        }
      },
      "DepositRequest": {
        "required": [
          "token",
          "tx_id",
          "user_address",
          "signature"
        ],
        "type": "object",
        "properties": {
          "token": {
            "description": "The address of the token being deposited.",
            "type": "string"
          },
          "tx_id": {
            "description": "The transaction ID of the deposit.",
            "type": "string"
          },
          "user_address": {
            "description": "The wallet address of the user making the deposit.",
            "type": "string"
          },
          "signature": {
            "description": "A digital signature of {token}{tx_id}, signed by the user's wallet.",
            "type": "string"
          }
        }
      },
      "DepositResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "description": "Deposit status: success or not found.",
            "type": "string"
          },
          "message": {
            "description": "Additional details about the deposit status.",
            "type": "string"
          }
        }
      },
      "WithdrawRequest": {
        "required": [
          "token_address",
          "user_address",
          "amount",
          "timestamp",
          "signature"
        ],
        "type": "object",
        "properties": {
          "token_address": {
            "description": "The address of the token being withdrawn.",
            "type": "string"
          },
          "user_address": {
            "description": "The wallet address of the user making the withdrawal.",
            "type": "string"
          },
          "amount": {
            "description": "The amount of tokens to be withdrawn.",
            "type": "string",
            "format": "int64"
          },
          "timestamp": {
            "description": "The current timestamp in seconds since January 1, 1970 (Unix epoch).",
            "type": "string",
            "format": "int64"
          },
          "signature": {
            "description": "A digital signature of {user_address}{token_address}{amount}{timestamp}, signed by the user's wallet.",
            "type": "string"
          }
        }
      },
      "WithdrawResponse": {
        "required": [
          "tx_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "tx_id": {
            "description": "The transaction ID of the withdrawal.",
            "type": "string"
          },
          "status": {
            "description": "Withdrawal status: in progress, succeeded, or failed.",
            "type": "string"
          },
          "message": {
            "description": "Additional details about the withdrawal status.",
            "type": "string"
          }
        }
      },
      "WithdrawStatusResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "description": "Withdrawal status: in progress, succeeded, failed, or not found in the database.",
            "type": "string"
          },
          "message": {
            "description": "Additional details about the withdrawal status.",
            "type": "string"
          }
        }
      },
      "TradeRequest": {
        "required": [
          "token_address",
          "slippage_bps",
          "user_address",
          "signature",
          "timestamp",
          "is_public"
        ],
        "type": "object",
        "properties": {
          "is_public": {
            "description": "Indicates whether the trade is executed in public mode or vanish mode.",
            "type": "boolean"
          },
          "token_address": {
            "description": "The address of the token being purchased.",
            "type": "string"
          },
          "amount": {
            "description": "The amount of tokens to be purchased.",
            "type": "string"
          },
          "slippage_bps": {
            "description": "The allowed slippage tolerance, ranging from 1 to 10,000 basis points (bps).",
            "type": "integer"
          },
          "deadline": {
            "description": "The trade expiration timestamp (in seconds).",
            "type": "integer"
          },
          "user_address": {
            "description": "The wallet address of the user making the trade.",
            "type": "string"
          },
          "timestamp": {
            "description": "The current timestamp in seconds since January 1, 1970 (Unix epoch).",
            "type": "string",
            "format": "int64"
          },
          "signature": {
            "description": "A digital signature of {token_address}{amount}{slippage_bps}{deadline}{timestamp}, signed by the user's wallet.",
            "type": "string"
          }
        }
      },
      "TradeResponse": {
        "required": [
          "tx_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "tx_id": {
            "description": "The transaction ID of the trade.",
            "type": "string"
          },
          "status": {
            "description": "Trade status: initiated.",
            "type": "string"
          },
          "message": {
            "description": "Additional details about the trade status.",
            "type": "string"
          }
        }
      },
      "TradePNLRequest": {
        "required": [
          "user_address",
          "signature"
        ],
        "type": "object",
        "properties": {
          "token_address": {
            "description": "Optional. If specified, retrieves PNL only for the given token address.",
            "type": "string"
          },
          "user_address": {
            "description": "The wallet address of the user.",
            "type": "string"
          },
          "signature": {
            "description": "A signature generated by signing the string {'get_pnl'}{user_address}{token_address} with the user's wallet. If token_address is not provided, exclude it from the signed message.",
            "type": "string"
          }
        }
      },
      "TradePNL": {
        "type": "object",
        "properties": {
          "invested": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of tokens (in SOL) invested."
          },
          "sold": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of tokens (in SOL) sold."
          },
          "holding": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of tokens (in SOL) still held."
          },
          "profit": {
            "type": "integer",
            "format": "int64",
            "description": "The net profit or loss from the trade. (in SOL)"
          }
        },
        "description": "Represents the profit and loss (PNL) details for a specific token trade."
      },
      "TradePNLResponse": {
        "required": [
          "pnls"
        ],
        "type": "object",
        "properties": {
          "pnls": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TradePNL"
            },
            "description": "A mapping of token addresses to their respective TradePNL data."
          }
        }
      },
      "TradeStatusResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "description": "Trade status: in progress, succeeded, or failed.",
            "type": "string"
          },
          "message": {
            "description": "Additional details about the trade status.",
            "type": "string"
          }
        }
      },
      "CentralWalletResponse": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "description": "The address of the central wallet.",
            "type": "string"
          }
        }
      },
      "TeamInfoResponse": {
        "required": [
          "id",
          "name",
          "fee",
          "fee_address",
          "fee_total",
          "fee_remaining"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the team",
            "type": "integer"
          },
          "name": {
            "description": "Human-readable name of the team",
            "type": "string"
          },
          "fee": {
            "description": "Fee percentage per trade. Represented in basis points (100 = 1%)",
            "type": "string"
          },
          "fee_address": {
            "description": "Wallet address where accumulated fees are sent when withdrawn",
            "type": "string"
          },
          "fee_total": {
            "description": "Total amount of fees accumulated by the team to date (includes withdrawn)",
            "type": "string"
          },
          "fee_remaining": {
            "description": "Remaining fees that are yet to be withdrawn",
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "string",
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "API key is missing or invalid"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "description": "",
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}