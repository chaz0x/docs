{
  "openapi": "3.0.1",
  "info": {
    "title": "Vanish Core API",
    "description": "Vanish Core API endpoints",
    "license": {
      "name": "MIT"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.vanish.trade/v2"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/check_balance": {
      "post": {
        "description": "Returns all balances of tokens for the user",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Balances response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
    },
    "/deposit": {
      "post": {
        "description": "Processes a user's deposit tx",
        "requestBody": {
          "description": "TBD",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deposit response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/deposit/{tx_id}": {
      "get": {
        "description": "Gets deposit status based on tx_id supplied",
        "parameters": [
          {
            "name": "tx_id",
            "in": "path",
            "description": "deposit transaction id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/withdraw": {
      "post": {
        "description": "Processes a user's withdraw action",
        "requestBody": {
          "description": "Token address & amount to be withdrawn",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Withdraw response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/withdraw/{tx_id}": {
      "get": {
        "description": "Gets withdraw status based on tx_id supplied",
        "parameters": [
          {
            "name": "tx_id",
            "in": "path",
            "description": "withdraw transaction id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Withdraw response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trade/buy": {
      "post": {
        "description": "Processes a user's buy action",
        "requestBody": {
          "description": "Buy action payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Trade response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
     "/trade/sell": {
      "post": {
        "description": "Processes a user's sell action",
        "requestBody": {
          "description": "Sell action payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Trade response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BalanceRequest": {
        "required": [
          "action",
          "user_address",
          "signature"
        ],
        "type": "object",
        "properties": {
          "action": {
            "description": "A prefix when making a signature",
            "type": "string"
          },
          "user_address": {
            "description": "User's wallet address",
            "type": "string"
          },
          "signature": {
            "description": "Signed {action}{user_address} by user's wallet",
            "type": "string"
          }
        }
      },
      "BalanceResponse": {
        "required": [
          "balances"
        ],
        "type": "object",
        "properties": {
          "balances": {
            "description": "This object maps token addresses to their corresponding  `BalanceInfo` which includes available and freeze balances",
            "type": "object"
          }
        }
      },
      "DepositRequest": {
        "required": [
          "token",
          "tx_id",
          "user_address",
          "signature"
        ],
        "type": "object",
        "properties": {
          "token": {
            "description": "A token address which user deposits",
            "type": "string"
          },
          "tx_id": {
            "description": "Deposit transaction id",
            "type": "string"
          },
          "user_address": {
            "description": "User's wallet address",
            "type": "string"
          },
          "signature": {
            "description": "Signed {token}{tx_id} by user's wallet",
            "type": "string"
          }
        }
      },
      "DepositResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "description": "success | not found",
            "type": "string"
          },
          "message": {
            "description": "details",
            "type": "string"
          }
        }
      },
      "WithdrawRequest": {
        "required": [
          "token_address",
          "user_address",
          "amount",
          "signature"
        ],
        "type": "object",
        "properties": {
          "token_address": {
            "description": "A token address which user withdraws",
            "type": "string"
          },
          "user_address": {
            "description": "User's wallet address",
            "type": "string"
          },
          "amount": {
            "description": "Token amount to be withdrawn",
            "type": "string",
            "format": "int64"
          },
          "signature": {
            "description": "Signed {user_address}{token_address}{amount} by user's wallet",
            "type": "string"
          }
        }
      },
      "WithdrawResponse": {
        "required": [
          "tx_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "tx_id": {
            "description": "Withdraw transaction id",
            "type": "string"
          },
          "status": {
            "description": "in progress | successed | failed",
            "type": "string"
          },
          "message": {
            "description": "details",
            "type": "string"
          }
        }
      },
      "WithdrawStatusResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "description": "in progress | successed | failed | not found in db",
            "type": "string"
          },
          "message": {
            "description": "details",
            "type": "string"
          }
        }
      },
      "TradeRequest": {
        "required": [
          "token_address",
          "slippage_bps",
          "user_address",
          "signature"
        ],
        "type": "object",
        "properties": {
          "token_address": {
            "description": "A token address which user buys",
            "type": "string"
          },
          "amount": {
            "description": "Token amount to be bought",
            "type": "string",
            "format": "int64"
          },
          "slippage_bps": {
            "description": "Slippage ranging from 1 to 10000",
            "type": "int64"
          },
          "deadline": {
            "description": "Transaction deadline",
            "type": "int128"
          },
          "user_address": {
            "description": "User's wallet address",
            "type": "string"
          },
          "signature": {
            "description": "Signed {token_address}{amount}{slippage_bps}{deadline} by user's wallet",
            "type": "string"
          }
        }
      },
      "TradeResponse": {
        "required": [
          "tx_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "tx_id": {
            "description": "Trade transaction id",
            "type": "string"
          },
          "status": {
            "description": "initiated",
            "type": "string"
          },
          "message": {
            "description": "details",
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "string",
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}